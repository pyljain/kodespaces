{"version":3,"sources":["Header.js","ProjectCard.js","AddProject.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","AppBar","position","style","backgroundColor","Toolbar","Typography","variant","flexGrow","textAlign","Button","onClick","onCreateProject","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","ProjectCard","classes","Card","className","CardContent","color","gutterBottom","project","status","component","name","language","cpu","memory","CardActions","size","AddProject","React","useState","setLanguage","setName","setCPU","setMemory","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","label","type","fullWidth","onChange","e","target","value","InputLabel","marginTop","Select","MenuItem","Slider","defaultValue","step","marks","min","max","valueLabelDisplay","newValue","DialogActions","onProjectCreate","App","projects","setProjects","showProjectDialog","setShowProjectDialog","fetchProjects","a","console","log","fetch","response","json","resJSON","useEffect","createProject","method","body","JSON","stringify","headers","res","padding","Grid","container","spacing","map","item","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f4db828.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Header = (props) => (\n  <AppBar position=\"static\" style={{ backgroundColor: \"#82ccdd\" }}>\n    <Toolbar>\n      <Typography variant=\"h6\" style={{ flexGrow: 1, textAlign: \"left\" }}>\n        Kodespaces\n      </Typography>\n      <Button\n        variant=\"contained\"\n        style={{ backgroundColor: \"#f6b93b\" }}\n        onClick={props.onCreateProject}\n      >\n        Create Project\n      </Button>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default Header;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function ProjectCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {props.project.status}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {props.project.name}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          {props.project.language}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          CPU\n          <br />\n          {props.project.cpu}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Memory\n          <br />\n          {props.project.memory}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Start</Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst AddProject = (props) => {\n  const [language, setLanguage] = React.useState(\"Node\");\n  const [name, setName] = React.useState(\"\");\n  const [cpu, setCPU] = React.useState(.5);\n  const [memory, setMemory] = React.useState(128);\n\n  const projectDetails = () => {\n    let project = {\n      name: name,\n      language: language,\n      cpu: cpu,\n      memory: memory,\n    };\n\n    props.onProjectCreate(project);\n  };\n  return (\n    <div>\n      <Dialog\n        open={true}\n        onClose={props.onClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Project</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Fill up your project details below\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Name\"\n            type=\"text\"\n            fullWidth\n            onChange={(e) => setName(e.target.value)}\n            value={name}\n          />\n          <InputLabel\n            id=\"demo-simple-select-helper-label\"\n            style={{ marginTop: \"20px\" }}\n          >\n            Language\n          </InputLabel>\n          <Select\n            id=\"demo-simple-select-helper\"\n            fullWidth\n            onChange={(e) => setLanguage(e.target.value)}\n            value={language}\n          >\n            <MenuItem value=\"Go\">Go</MenuItem>\n            <MenuItem value=\"Node\">Node.js</MenuItem>\n            <MenuItem value=\"Python\">Python</MenuItem>\n          </Select>\n          <Typography gutterBottom style={{ marginTop: \"20px\" }}>\n            CPU\n          </Typography>\n          <Slider\n            defaultValue={0.5}\n            step={0.5}\n            marks\n            min={0.1}\n            max={4}\n            valueLabelDisplay=\"auto\"\n            onChange={(e, newValue) => setCPU(newValue)}\n            value={cpu}\n          />\n          <Typography gutterBottom style={{ marginTop: \"20px\" }}>\n            Memory\n          </Typography>\n          <Slider\n            defaultValue={256}\n            step={128}\n            marks\n            min={128}\n            max={2048}\n            valueLabelDisplay=\"auto\"\n            onChange={(e, newValue) => {\n              setMemory(newValue)\n            }}\n            value={memory}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={projectDetails} color=\"primary\">\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default AddProject;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport ProjectCard from \"./ProjectCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport AddProject from \"./AddProject\";\n\nfunction App() {\n  const [projects, setProjects] = React.useState([]);\n  const [showProjectDialog, setShowProjectDialog] = React.useState(false);\n\n  const fetchProjects = async () => {\n    console.log(\"Calling API\");\n    const response = await fetch(\"/projects\");\n    const resJSON = await response.json();\n    setProjects(resJSON);\n    console.log(resJSON);\n  };\n\n  React.useEffect(() => {\n    fetchProjects();\n  }, []);\n\n  const createProject = async (project) => {\n    const res = await fetch('/project', {\n      method: \"POST\",\n      body: JSON.stringify(project),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n\n    setShowProjectDialog(false)\n\n    if (res.status === 201) {\n      // refresh UI\n      await fetchProjects()\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header onCreateProject={() => setShowProjectDialog(true)} />\n      {showProjectDialog\n        ? <AddProject\n          onClose={() => setShowProjectDialog(false)}\n          onProjectCreate={(project) => createProject(project)}\n        />\n        : \"\"}\n      <div style={{ padding: \"10px\" }}>\n        <Grid container spacing={2}>\n          {projects.map((project) => {\n            return (\n              <Grid item xs={4}>\n                <ProjectCard project={project} />\n              </Grid>\n            );\n          })}\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}